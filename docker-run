#!/usr/bin/env python3
from __future__ import annotations

import os
import subprocess
import sys
from typing import NoReturn


def _user() -> list[str]:
    ret = ['--user', f'{os.getuid()}:{os.getgid()}']
    if b'podman' in subprocess.check_output(('docker', 'version')).lower():
        ret.append('--userns=keep-id')
    return ret


def _env() -> tuple[str, ...]:
    cfg = ('git', 'config')
    name = subprocess.check_output((*cfg, 'user.name')).decode().strip()
    email = subprocess.check_output((*cfg, 'user.email')).decode().strip()
    return (
        '--env', f'GIT_AUTHOR_NAME={name}',
        '--env', f'GIT_AUTHOR_EMAIL={email}',
        '--env', f'GIT_COMMITTER_NAME={name}',
        '--env', f'GIT_COMMITTER_EMAIL={email}',
        '--env', f'DEBFULLNAME={name}',
        '--env', f'DEBEMAIL={email}',
    )


def _gpg_volumes() -> list[str]:
    def _gpg(f: str, *, home: str = os.path.expanduser('~')) -> str:
        return os.path.join(home, '.gnupg', f)

    for paths in (
        ('pubring.kbx', 'private-keys-v1.d'),  # new format
        # TODO: deadsnakes GHA still uses this
        ('pubring.gpg', 'secring.gpg'),  # old format
    ):
        if all(os.path.exists(_gpg(p)) for p in paths):
            return [
                f'--volume={_gpg(p)}:{_gpg(p, home="/root")}:ro'
                for p in paths
            ]
    else:
        raise AssertionError('no gpg keys found?')


def main() -> NoReturn:
    cmd = (
        'docker', 'run', '--rm',
        '-ti' if sys.stdin.isatty() else '-i',
        *_env(),
        *_gpg_volumes(),
        *_user(),
        *sys.argv[1:],
    )
    os.execvp(cmd[0], cmd)


if __name__ == '__main__':
    raise SystemExit(main())
