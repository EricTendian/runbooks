#!/usr/bin/env python3
import argparse
import os.path
import subprocess
import sys
from typing import NoReturn


HERE = os.path.abspath(os.path.dirname(__file__))


def main() -> NoReturn:
    parser = argparse.ArgumentParser()
    parser.add_argument('--source', action='store_true')
    parser.add_argument('--git-build', action='store_true')
    args = parser.parse_args()

    print('*' * 79)
    print('Parsing target distribution')
    print('*' * 79)
    dist = subprocess.check_output((
        'dpkg-parsechangelog', '--show-field=distribution',
    )).decode().strip()

    tag = f'{dist}-deadsnakes'
    print('*' * 79)
    print(f'Building image (tag: {tag})')
    print('*' * 79)
    with open(os.path.join(HERE, f'dockerfiles/Dockerfile.{dist}'), 'rb') as f:
        subprocess.check_call(('docker', 'build', '-qt', tag, '-'), stdin=f)

    print('*' * 79)
    print('Running build (results will be in ../dist)')
    print('*' * 79)
    os.makedirs('../dist', exist_ok=True)
    pwd = os.getcwd()
    home = os.environ['HOME']
    gbp_args = '' if args.source else '-us -uc'
    gbp_args += (
        '' if not args.git_build else
        ' --git-pristine-tar-commit '
        "--git-upstream-tag='deadsnakes/v%(version%~%_)s'"
    )
    extra = '--git-builder="debuild -S"' if args.source else ''
    prog = (
        f'cp -r /code /tmp && '
        f'cd /tmp/code && '
        f'git config --global user.name "Anthony Sottile" && '
        f'git config --global user.email "asottile@umich.edu" && '
        f'apt-get update -qq && '
        f'mk-build-deps --install --remove --tool "apt-get --yes" debian/control && '  # noqa
        f'gbp buildpackage {gbp_args} --git-pristine-tar --git-debian-branch=ubuntu/{dist} {extra} && '  # noqa
        f'find .. -maxdepth 1 -type f | xargs --replace cp {{}} /dist'
    )
    interactive = '-ti' if sys.stdin.isatty() else '-i'
    cmd = (
        'docker', 'run', '--rm', interactive,
        '-v', f'{pwd}:/code:ro',
        '-v', f'{pwd}/../dist:/dist:rw',
        '-v', f'{home}/.gnupg/pubring.gpg:/root/.gnupg/pubring.gpg:ro',
        '-v', f'{home}/.gnupg/secring.gpg:/root/.gnupg/secring.gpg:ro',
        tag, 'bash', '-euxc', prog,
    )
    os.execvp(cmd[0], cmd)


if __name__ == '__main__':
    exit(main())
