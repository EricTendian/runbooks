#!/usr/bin/env python3
from __future__ import annotations

import os
import sys
from typing import NoReturn


def main() -> NoReturn:
    with open('debian/rules') as f:
        for line in f:
            if line.startswith('SVER='):
                _, sver = line.strip().split('=')
                break
        else:
            raise SystemExit('SVER not found')

    with open('debian/libPVER.symbols.in') as f:
        pver_diff_lines = tuple(
            f' {line.split("@")[0]}@'
            for line in f if line.startswith(' ')
        )

    with open('debian/libpython.symbols.in') as f:
        lines = tuple(f)

    print('*' * 79)
    print('Paste the printed patch')
    print('Press ^D')
    print('*' * 79)

    patch_lines = tuple(sys.stdin)

    new_lines = []
    i = 0
    for line in patch_lines:
        if line.startswith(pver_diff_lines):
            continue

        if line.startswith(' ') and not line.startswith(('  (', ' libpython')):
            symbol, _ = line.split()

            new_lines.append(lines[i])
            i += 1
            while new_lines[-1].split()[0] != symbol:
                new_lines.append(lines[i])
                i += 1
        elif (
                line.startswith('+') and
                not line.startswith('+++') and
                not line.startswith('+#MISSING')
        ):
            _, symbol, _ = line.split()
            new_lines.append(f' {symbol} {sver}\n')
        elif (
                line.startswith('-') and
                not line.startswith('---') and
                not line.startswith('- (optional')
        ):
            i += 1
    new_lines.extend(lines[i:])

    with open('debian/libpython.symbols.in', 'w') as f:
        f.writelines(new_lines)

    cmd = (
        'git', 'commit', '-am', 'debian/libpython.symbols.in: update symbols.',
    )
    os.execvp(cmd[0], cmd)


if __name__ == '__main__':
    raise SystemExit(main())
