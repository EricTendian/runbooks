#!/usr/bin/env python3
from __future__ import annotations

import argparse
import datetime
import os
import re
import subprocess

VERSION_RE = re.compile(r'^v(\d+\.\d+\.\d+)((?:a|b|rc)\d+)?(.*)$')


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('repo')
    parser.add_argument('branch')
    args = parser.parse_args()

    os.chdir(args.repo)

    _, dist = args.branch.split('/')
    subprocess.check_call(('git', 'checkout', args.branch))

    # short circuit if we are already up to date
    if not subprocess.call((
        'git', 'merge-base', '--is-ancestor', 'origin/upstream', 'HEAD',
    )):
        return 42

    # delete all of the deadsnakes tags so they are not considered
    for tag in subprocess.check_output(('git', 'tag', '--list')).splitlines():
        if tag.startswith(b'deadsnakes/'):
            subprocess.check_call(
                ('git', 'tag', '-d', tag), stdout=subprocess.DEVNULL,
            )

    tag_cmd = ('git', 'describe', '--tags', 'origin/upstream')
    current_tag = subprocess.check_output(tag_cmd).decode().strip()
    v_match = VERSION_RE.match(current_tag)
    if not v_match:
        raise SystemExit(f'Unexpected tag: {current_tag}')
    if v_match[2]:  # if it is a pre-release
        debian_version = f'{v_match[1]}~{v_match[2]}{v_match[3]}-1+{dist}1'
        deadsnakes_tag = f'deadsnakes/v{v_match[1]}_{v_match[2]}{v_match[3]}'
    else:
        debian_version = f'{v_match[1]}{v_match[3]}-1+{dist}1'
        deadsnakes_tag = f'deadsnakes/v{v_match[1]}{v_match[3]}'

    subprocess.check_call(('git', 'tag', deadsnakes_tag, 'origin/upstream'))
    subprocess.check_call(('gbp', 'pq', 'import'))
    subprocess.check_call(('git', 'checkout', args.branch))
    subprocess.check_call(('git', 'merge', 'origin/upstream', '--no-edit'))
    subprocess.check_call(('gbp', 'pq', 'rebase'))
    subprocess.check_call(('gbp', 'pq', 'export'))
    subprocess.check_call(('git', 'add', 'debian/patches'))
    if subprocess.call(('git', 'diff', '--staged', '--quiet')):
        subprocess.check_call(('git', 'commit', '-m', 'Refresh patches'))
    subprocess.check_call((
        'dch', '--newversion', debian_version, '--distribution', dist,
        f'Update to {current_tag} ({datetime.date.today()}).',
    ))
    subprocess.check_call((
        'git', 'commit', '-am', f'Finish changelog ({datetime.date.today()})',
    ))
    return 0


if __name__ == '__main__':
    raise SystemExit(main())
